# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c--SQEvrCDWzz1XvUzPCQ-w7OY8sEb8K
"""

10**2==99

age=20
age==20

if age >= 18:
    print("adult")
else:
    print("child")

if age >= 18:
    print("adult")
elif age >= 13:
    print("teenager")
else:
    print("child")

for number in [1,2,3,4,5]:
    print(number)

my_list = [1,2,3,4,5]
for number in my_list:
    print(number/2)

def is_adult(age):
    if age >= 18:
        print("adult")
    elif age >= 13:
        print("teenager")
    else:
        print("child")

is_adult(20)

mew_list = [1,2,3,4,5]
sortede_list = []
for number in my_list:
    sortede_list.append(number*2)
print(sortede_list)

import requests
import time
import os

API_KEY = os.getenv("API_KEY")
UPLOAD_ENDPOINT = 'https://api.assemblyai.com/v2/upload'
TRANSCRIPT_ENDPOINT = 'https://api.assemblyai.com/v2/transcript'
CHUNK_SIZE = 5_242_880  # 5MB

HEADERS_AUTH_ONLY = {'authorization': API_KEY}
HEADERS = {
    "authorization": API_KEY,
    "content-type": "application/json"
}

def upload_file(filename):
    print(f"Uploading file '{filename}'...", end="")
    def file_reader(filename):
        with open(filename, 'rb') as f:
            while chunk := f.read(CHUNK_SIZE):
                yield chunk
    response = requests.post(UPLOAD_ENDPOINT, data=file_reader(filename), headers=HEADERS_AUTH_ONLY)
    print('Upload complete')
    return response.json()['upload_url']

def initiate_transcription(audio_url):
    print('Initiating transcription...')
    response = requests.post(TRANSCRIPT_ENDPOINT, json={'audio_url': audio_url}, headers=HEADERS)
    return response.json()['id']

def check_transcription_status(transcript_id):
    return requests.get(f"{TRANSCRIPT_ENDPOINT}/{transcript_id}", headers=HEADERS).json()

def get_transcript(audio_url):
    transcript_id = initiate_transcription(audio_url)
    print('Waiting for transcription to complete...')
    while True:
        data = check_transcription_status(transcript_id)
        if data['status'] == 'completed':
            print('Transcription completed successfully')
            return data, None
        elif data['status'] == 'error':
            return None, data['error']
        print("Checking again in 5 seconds...")
        time.sleep(5)

def process_audio(filename):
    audio_url = upload_file(filename)
    data, error = get_transcript(audio_url)
    if data:
        print(f'\nTranscript:\n\n{data["text"]}')
    else:
        print("Error:", error)

if __name__ == '__main__':
    if API_KEY:
        print("API key found. Starting transcription process.\n")
        process_audio(filename="example-audio.m4a")
    else:
        print('API key not found. Please set the API_KEY environment variable.')
        print('You can get a free API key at https://www.assemblyai.com')